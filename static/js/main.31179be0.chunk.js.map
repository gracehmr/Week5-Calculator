{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["math","require","App","useState","total","setTotal","handleClick","val","concat","target","name","className","type","value","onClick","evaluate","toString","err","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAGMA,EAAOC,EAAQ,IAwDNC,EAtDH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAc,SAACC,GACnBF,EAASD,EAAMI,OAAOD,EAAIE,OAAOC,QAgBnC,OACE,sBAAKC,UAAY,YAAjB,UAEE,+BACE,uBAAOC,KAAK,OAAOC,MAAOT,MAG5B,sBAAKO,UAAY,SAAjB,UAEE,wBAAQA,UAAY,WAAWG,QAtBZ,WACvBT,EAAS,KAqBL,mBACA,wBAAQM,UAAY,WAAWG,QAnBZ,WACvB,IACET,EAASL,EAAKe,SAASX,GAAOY,YAC9B,MAAMC,GACNZ,EAAS,WAeP,eACA,wBAAQK,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,eACA,wBAAQI,KAAO,IAAII,QAASR,EAA5B,sBCrCOY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.31179be0.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from \"react\"\n\nconst math = require(\"mathjs\")\n\nconst App = () => {\n  const [total, setTotal] = useState(\"\")\n\n  const handleClick = (val) => {\n    setTotal(total.concat(val.target.name));\n  }\n\n  const handleClickClear = () => {\n    setTotal(\"\")\n  }\n\n  const handleClickEqual = () => {\n    try {\n      setTotal(math.evaluate(total).toString())\n    } catch(err) {\n      setTotal(\"Error\")\n    }\n   \n  }\n\n  return (\n    <div className = \"container\">\n\n      <form>\n        <input type=\"text\" value={total}></input>\n      </form>\n\n      <div className = \"keypad\">\n\n        <button className = \"clearBtn\" onClick={handleClickClear}>clear</button>\n        <button className = \"totalBtn\" onClick={handleClickEqual}>=</button>\n        <button name = \"+\" onClick={handleClick}>+</button>\n        <button name = \"-\" onClick={handleClick}>-</button>\n        <button name = \"*\" onClick={handleClick}>*</button>\n        <button name = \"/\" onClick={handleClick}>/</button>\n        <button name = \"1\" onClick={handleClick}>1</button>\n        <button name = \"2\" onClick={handleClick}>2</button>\n        <button name = \"3\" onClick={handleClick}>3</button>\n        <button name = \"4\" onClick={handleClick}>4</button>\n        <button name = \"5\" onClick={handleClick}>5</button>\n        <button name = \"6\" onClick={handleClick}>6</button>\n        <button name = \"7\" onClick={handleClick}>7</button>\n        <button name = \"8\" onClick={handleClick}>8</button>\n        <button name = \"9\" onClick={handleClick}>9</button>\n        <button name = \"0\" onClick={handleClick}>0</button>\n\n\n      </div>\n\n    </div>  \n  )\n\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}